<?php
/*class to store, add, return all errors, check if error exist, grab 1st error from rule. 
this class could be generic and reused.
reference : https://www.youtube.com/watch?v=DRWwDB6bU9o&t=14s
*/
class ErrorHandler
{
	private $errors = array(); //could be no errors, so assigning empty array.
	public function addError($error, $key = null) //not tied to calling class, hence allowing null key for reuse.
	{
		//echo "<br><strong><i>printing from error class contruct adderror function</i></strong><br>"; //debug assist - print header to see the output generated by this class
		if ($key) //check if the key exists or is null
		{
			$this->errors [$key][] = $error; //to add an error to 
			//echo "<br><strong><i>printing from error class contruct adderror function key has a value</i></strong><br>"; //debug assist.
		}
		else
		{
			$this->errors[] = $error;
			//echo "<br><strong><i>printing from error class contruct adderror function key has <u>no</u> value</i></strong><br>"; //debug assist
		}
	}
	public function all($key=null) //allow optional key to be passed. 
	/*Found ternary operator easier alternative to use for brevity other than if-then-else
	Reference: http://php.net/manual/en/language.operators.comparison.php
	Reference: https://www.youtube.com/watch?v=qdqIvqOt7vw&list=PLfdtiltiRHWFD41D_LDomY1Fb-O9MtFqq&index=10
	? act like curly braces colon seperates boolean or if/else */
	{
		return isset($this->errors[$key]) ? $this->errors[$key] : $this->errors; /*if the errors has a value, return the errors keys in the array, 
		else return the errors array which is empty by default. */
	}
	public function hasErrors()
	{
		return count($this->all()) ? true : false; //if there are any errors returned by count, return a  boolean true, otherwise a false.
	}
	public function first($key) //return if the key is set.
	{
		return isset($this->all() [$key] [0]) ? $this->all() [$key] [0] : false; //ternary operator. if first error returned at 1st, or an empty tring.
	}
}

?>